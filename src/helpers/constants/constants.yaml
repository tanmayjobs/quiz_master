application:
  name: "Enigma"
  version: "0.0.1"
  entry_point: "main.py"

config:
  sql:
    file_path: "/storage"
    file_name: "data.sqlite3"
    db_path: "/storage/data.sqlite3"

  logs:
    file_path: "/server.log"
    filemode: "a+"
    format: "%(asctime)s %(levelname)-10s [%(filename)s:%(lineno)d] %(message)s"
    datefmt: "%d-%m-%Y %H:%M:%S"

screens:
  home:
    player: "Press:\n- '1' to Play random quiz\n- '2' to Explore quizzes\n- '3' to All attempts\n- '4' to Sign Out\nEnter your choice:"
    creator: "Press:\n- '1' to Play random quiz\n- '2' to Explore quizzes\n- '3' to All attempts\n- '4' to Manage My Quiz\n- '5' to Sign Out\nEnter your choice:"
    admin: "Press:\n- '1' to Add a creator\n- '2' to Remove a user\n- '3' to Remove a quiz\n- '4' to Sign Out\nEnter your choice:"

  authentication: "Press:\n- '1' to Sign In\n- '2' to Sign Up\n- '3' to Exit\nEnter your choice:"
  manage_quizzes: "Press:\n- '1' to Add quiz\n- '2' to Remove quiz\n- '3' to Modify a Quiz\n- '4' to Go Back\nEnter your choice:"
  manage_quiz: "Press:\n- '1' to List questions\n- '2' to Add question\n- '3' to Remove question\n- '4' to Go Back\nEnter your choice:"

regex_patterns:
  username: '^[a-zA-Z]+[a-zA-Z0-9]*$'
  password: '^.*(?=.{6,})(?=.*[a-zA-Z])(?=.*\d)(?=.*[@!#$%&? "]).*$'
  alpha_num_q2: '^.*[a-zA-Z0-9].*$'
  correct_option: '^[1-4]$'

strings:
  admin: "Admin"
  creator: "Creator"
  player: "Player"
  quiz: "Quiz"
  id: "Id"
  username: "Username"
  role: "Role"
  question: "Question"
  option: "Option"
  a: "A"
  quiz_name: "quiz_name"
  all_questions: "all_questions"
  movie: "Movie"
  music: "Music"
  book: "Book"
  other: "Other"
  performer: "performer"
  type: "Type"
  result: "Result"
  options_json: 2
  question_text: 1
  question_id: 0
  is_correct: "is_correct"
  array: "[{}]"
  type_id: "tag_id"
  type_name: "tag_name"
  user: "User"
  filter: "%{search_key}%"
  played_at: "Played At"
  result_percentage: "{0:.2f}%"

numbers:
  zero: 0
  one: 1
  two: 2
  four: 4
  five: 5
  six: 6
  ten: 10

entities:
  - User
  - Quiz

messages:
  quiz_name: "Playing quiz '{quiz_name}' by {creator_name}!"
  quiz_type: "{} is about {}."
  creator_info: "Enter the following details for the creator you want to add-"
  working_on_quiz: "OOPS, Creator is still working on this quiz.\nWhy don't you explore some other quizzes."
  greet: "Hello {username}, hope you're doing fine..."
  incorrect_guess: "Your guess was incorrect, answer is {option_text}."
  correct_guess: "You guess is correct, {option_text} is the correct answer of this question."
  top_record: "These are the top records for this quiz."

inputs:
  username: "Enter username:"
  password: "Enter password:"
  user_id: "Enter user id:"
  quiz_id: "Enter quiz id:"
  question_id: "Enter question id:"
  keyword: "Enter keyword to search(name of the quiz or types associated):"
  type_ids: "Enter type ids (comma separated values):"
  quiz_name: "Enter quiz name:"
  question: "Enter question:"
  option: "Enter option {}:"
  number_of_questions: "Enter the number of questions (between 1 and 10):"
  number_of_options: "Enter the number of options (between 2 and 6):"
  correct_option: "Enter correct option (1, 2, 3 or 4):"
  explore_quizzes: "Enter keyword to search quiz(leave empty to get all quizzes):"
  question_prompt: "Question {}.{}\nOption 1.{}\nOption 2.{}\nOption 3.{}\nOption 4.{}\n\nWhat's your guess(1, 2, 3 or 4):"

outputs:
  user_added: "User added successfully..."
  quiz_added: "Quiz added successfully.\nYou should head to Modify Quiz section to add some questions, just a suggestion..."
  creator_added: "Creator added successfully..."
  question_added: "Question added successfully..."
  sign_in: "Signed in system as {}..."
  sign_out: "Signed out from the system..."
  invalid_choice: "Invalid Choice."
  user_info: "{user_id:5}\t{username:20}\t{user_role:20}"
  type_info: "{tag_id:5}\t{tag_name:20}"
  quiz_info: "{quiz_id:5}\t{quiz_name:20}\t{quiz_types:40}"
  question_info: "{question_id:5}\t{question_text:80}"
  question_all_info: "Question {question_id}.{question_text}\nOption 1.{option_1}\nOption 2.{option_2}\nOption 3.{option_3}\nOption 4.{option_4}\nCorrect Option.{correct_option}"
  record_info: "{record_id:5}\t{quiz_name:20}\t{player_name:20}\t{result:10}\t{played_at:20}"
  user_removed: "User removed successfully..."
  quiz_removed: "Quiz removed successfully..."
  question_removed: "Question removed successfully..."
  zero_quizzes: "No quizzes found! :("
  not_yet: "There are no {} yet!"
  quiz_result: "You scored {result:0.2f}% in {quiz_name} quiz.\nYou can check all of your scores in My Records section."
  no_quiz_records: "You haven't played any quizzes yet!"
  no_quizzes: "No quizzes found for '{}'."

errors:
  weak_password: "Password is too weak."
  username_empty: "Username can't be empty!"
  password_empty: "Password can't be empty!"
  invalid_credentials: "Invalid username or password!"
  user_404: "User not found!"
  username_already_exists: "Username already exists!"
  quiz_404: "Quiz not found!"
  performer_required: "Performer is required for this action!"
  permission: "You do not have enough permissions to perform this action!"
  unexpected_error: "Unexpected Error Occurred!!\nExiting the System. Please contact the administrator."
  invalid_input: "Invalid input!"

sql_queries:
  create_auth_table: |
    CREATE TABLE IF NOT EXISTS `auth` (
      `id` varchar(255) NOT NULL,
      `username` varchar(255) NOT NULL,
      `hash_password` varchar(255) NOT NULL,
      `user_role` enum('0','1','2') NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE KEY `username` (`username`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

  create_quiz_table: |
    CREATE TABLE IF NOT EXISTS `quizzes` (
    `id` varchar(255) NOT NULL,
    `quiz_name` varchar(30) NOT NULL,
    `creator_id` varchar(255) NOT NULL,
    PRIMARY KEY (`id`),
    UNIQUE KEY `quiz_name` (`quiz_name`),
    KEY `creator_id` (`creator_id`),
    CONSTRAINT `quizzes_ibfk_1` FOREIGN KEY (`creator_id`) REFERENCES `auth` (`id`) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

  create_question_table: |
    CREATE TABLE IF NOT EXISTS `questions` (
      `id` varchar(255) NOT NULL,
      `question_text` varchar(255) NOT NULL,
      `quiz_id` varchar(255) NOT NULL,
      PRIMARY KEY (`id`),
      KEY `quiz_id` (`quiz_id`),
      CONSTRAINT `questions_ibfk_1` FOREIGN KEY (`quiz_id`) REFERENCES `quizzes` (`id`) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

  create_option_table: |
    CREATE TABLE IF NOT EXISTS `options` (
      `id` varchar(255) NOT NULL,
      `option_text` varchar(255) NOT NULL,
      `is_correct` tinyint(1) NOT NULL,
      `question_id` varchar(255) NOT NULL,
      PRIMARY KEY (`id`),
      KEY `question_id` (`question_id`),
      CONSTRAINT `options_ibfk_1` FOREIGN KEY (`question_id`) REFERENCES `questions` (`id`) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

  create_quiz_score_table: |
    CREATE TABLE IF NOT EXISTS `score_table` (
      `id` varchar(255) NOT NULL,
      `player_id` varchar(255) NOT NULL,
      `quiz_id` varchar(255) NOT NULL,
      `score` decimal(3,2) NOT NULL,
      `played_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
      PRIMARY KEY (`id`),
      KEY `player_id` (`player_id`),
      KEY `quiz_id` (`quiz_id`),
      CONSTRAINT `score_table_ibfk_1` FOREIGN KEY (`player_id`) REFERENCES `auth` (`id`) ON DELETE NO ACTION,
      CONSTRAINT `score_table_ibfk_2` FOREIGN KEY (`quiz_id`) REFERENCES `quizzes` (`id`) ON DELETE NO ACTION
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

  create_type_table: |
    CREATE TABLE IF NOT EXISTS `tags` (
      `id` varchar(255) NOT NULL,
      `tag_name` varchar(20) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE KEY `tag_name` (`tag_name`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

  create_quiz_type_mapping_table: |
    CREATE TABLE IF NOT EXISTS `quiz_tags` (
      `id` varchar(255) NOT NULL,
      `quiz_id` varchar(255) NOT NULL,
      `tag_id` varchar(255) NOT NULL,
      PRIMARY KEY (`id`),
      KEY `quiz_id` (`quiz_id`),
      KEY `tag_id` (`tag_id`),
      CONSTRAINT `quiz_tags_ibfk_1` FOREIGN KEY (`quiz_id`) REFERENCES `quizzes` (`id`) ON DELETE CASCADE,
      CONSTRAINT `quiz_tags_ibfk_2` FOREIGN KEY (`tag_id`) REFERENCES `tags` (`id`) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

  get_all_users: |
    SELECT * FROM auth
    WHERE user_role != 0;

  get_user: |
    SELECT * FROM auth
    WHERE username = %s;

  add_user: |
    INSERT INTO auth(id, username, hash_password, user_role)
    VALUES(%s, %s, %s, %s);

  remove_user: |
    UPDATE authentication
    SET is_deleted = True
    WHERE id = %s;

  get_quiz: |
    SELECT
    quiz.id,
    quiz.quiz_name,
    quiz.creator_id,
    auth.username,
    GROUP_CONCAT(
        json_object(
            'tag_id', tag.id,
            'tag_name', tag.tag_name
        )
    ) AS tags
    FROM quizzes AS quiz
    INNER JOIN auth AS auth ON quiz.creator_id = auth.id
    LEFT JOIN quiz_tags AS quiz_tag ON quiz_tag.quiz_id = quiz.id
    LEFT JOIN tags AS tag ON tag.id = quiz_tag.tag_id
    WHERE quiz.id = %s
    GROUP BY quiz.id;

  get_random_quiz: |
    SELECT
    quiz.id,
    quiz.quiz_name,
    quiz.creator_id,
    auth.username,
    GROUP_CONCAT(
        json_object(
            'tag_id', tag.id,
            'tag_name', tag.tag_name
        )
    ) AS tags
    FROM quizzes AS quiz
    INNER JOIN auth AS auth ON quiz.creator_id = auth.id
    INNER JOIN quiz_tags AS quiz_tag ON quiz_tag.quiz_id = quiz.id
    INNER JOIN tags AS tag ON tag.id = quiz_tag.tag_id
    GROUP BY quiz.id LIMIT 1;

  add_quiz: |
    INSERT INTO quizzes(id, quiz_name, creator_id)
    VALUES(%s, %s, %s);

  remove_quiz: |
    DELETE FROM quizzes
    WHERE id = %s and creator_id = %s;

  add_question: |
    INSERT INTO questions(quiz_id, question)
    VALUES(%s, %s);

  add_option: |
    INSERT INTO options(question_id, option, is_correct)
    VALUES(%s, %s, %s);

  add_quiz_type: |
    INSERT INTO quiz_tags(id, quiz_id, tag_id)
    VALUES(%s, %s, %s);

  remove_quiz_type: |
    DELETE FROM quiz_tags
    WHERE quiz_id = %s AND tag_id = %s;

  get_all_tags: |
    SELECT * FROM tags;

  create_tag: |
    INSERT INTO tags (id, tag_name)
    VALUES (%s, %s);

  remove_question_by_quiz: |
    DELETE FROM questions
    WHERE quiz_id = %s;

  remove_question: |
    DELETE FROM questions
    WHERE id = %s;

  remove_option_by_question: |
    DELETE FROM options
    WHERE question_id = %s;

  get_user_quizzes: |
    SELECT
    quiz.id,
    quiz.quiz_name,
    quiz.creator_id,
    auth.username,
    GROUP_CONCAT(
        json_object(
            'tag_id', t.id,
            'tag_name', t.tag_name
        )
    ) AS tags
    FROM quizzes AS quiz
    INNER JOIN auth AS auth ON quiz.creator_id = auth.id
    INNER JOIN quiz_tags AS qt ON qt.quiz_id = quiz.id
    INNER JOIN tags AS t ON t.id = qt.tag_id
    WHERE quiz.creator_id = %s AND quiz.is_deleted = False
    GROUP BY quiz.id
    ORDER BY quiz.created_at;

  get_quiz_types: |
    SELECT tags.*
    FROM quiz_tags
    INNER JOIN tags ON tag_id = tags.id
    INNER JOIN quizzes ON quiz_id = quizzes.id
    WHERE = %s AND quizzes.is_deleted = False;

  get_quiz_questions: |
    SELECT
    q.id AS question_id,
    q.question AS question_text,
    GROUP_CONCAT(
        json_object(
            'option', o.option,
            'is_correct', o.is_correct
        )
    ) AS options_json
    FROM questions AS q
    INNER JOIN options AS o ON q.id = o.question_id
    INNER JOIN quizzes AS quiz ON q.quiz_id = quiz.id
    WHERE quiz.id = %s GROUP BY q.id
    ORDER BY RANDOM();

  get_all_quizzes: |
   SELECT
    quiz.id as quiz_id,
    quiz.quiz_name as quiz_name,
    quiz.creator_id as creator_id,
    auth.username as creator_name,
    GROUP_CONCAT(
      json_object(
          'tag_id', tag.id,
          'tag_name', tag.tag_name
      )
    ) as tags
    FROM quizzes AS quiz
    INNER JOIN auth AS auth ON quiz.creator_id = auth.id
    LEFT JOIN quiz_tags AS quiz_tag ON quiz_tag.quiz_id = quiz.id
    LEFT JOIN tags AS tag ON tag.id = quiz_tag.tag_id
    GROUP BY quiz.id;

  filter_all_quizzes: |
    SELECT
    quiz.id,
    quiz.quiz_name,
    quiz.creator_id,
    auth.username,
    GROUP_CONCAT(
        json_object(
            'tag_id', t.id,
            'tag_name', t.tag_name
        )
    ) AS tags
    FROM quizzes AS quiz
    INNER JOIN auth AS auth ON quiz.creator_id = auth.id
    INNER JOIN quiz_tags AS qt ON qt.quiz_id = quiz.id
    INNER JOIN tags AS t ON t.id = qt.tag_id
    WHERE quiz.is_deleted = False
    AND (quiz.quiz_name LIKE %s OR t.tag_name LIKE %s)
    GROUP BY quiz.id
    ORDER BY quiz.created_at DESC;

  add_quiz_score: |
    INSERT INTO quiz_score_table(player_id, quiz_id, player_score, total_score)
    VALUES(%s, %s, %s, %s);

  get_player_scores: |
    SELECT
    auth.id,
    auth.username,
    quizzes.id,
    quizzes.name,
    player_score,
    total_score,
    played_at
    FROM quiz_score_table
    INNER JOIN quizzes ON quizzes.id = quiz_score_table.quiz_id
    INNER JOIN auth ON auth.id = quiz_score_table.player_id
    WHERE player_id = %s
    ORDER BY played_at DESC;

  top_quiz_scores: |
    SELECT
    auth.id,
    auth.username,
    quizzes.id,
    quizzes.name,
    MAX(player_score),
    total_score,
    played_at
    FROM quiz_score_table
    INNER JOIN quizzes ON quizzes.id = quiz_score_table.quiz_id
    INNER JOIN auth ON auth.id = quiz_score_table.player_id
    WHERE quizzes.id = %s
    GROUP BY quizzes.id, auth.id
    ORDER BY player_score DESC LIMIT %s;

  correct_question_options: |
    SELECT questions.id AS question_id, options.id AS option_id FROM quizzes
    INNER JOIN questions ON questions.quiz_id = quizzes.id
    INNER JOIN options ON options.question_id = questions.id
    WHERE quizzes.id = 1;

  correct_options: |
    SELECT questions.id AS question_id,
    group_concat(
    options.id
    ) AS correct_options
    FROM quizzes
    INNER JOIN questions ON questions.quiz_id = quizzes.id
    INNER JOIN options ON options.question_id = questions.id
    WHERE quizzes.id = 1 and is_correct
    GROUP BY question_id;

  get_user_by_id: |
    SELECT * FROM auth
    WHERE id = %s;

  get_quiz_by_id: |
    SELECT * FROM quizzes
    WHERE id = %s;

  get_tag_by_id: |
    SELECT * FROM tags
    WHERE id = %s;

  get_question_by_id: |
    SELECT * FROM questions
    WHERE id = %s;

  get_option_by_id: |
    SELECT * FROM options
    WHERE id = %s;


log_text:
  system_start: "Initializing System..."
  system_exit: "System Exit..."
  system_error: "System had an unexpected error...\n{}"
  invalid_credentials: "Invalid credentials tried by user {}"
  reading_data: "reading data from database..."
  writing_data: "reading data from database..."

