screens:
  home:
    player: "Press:\n- '1' to Play random quiz\n- '2' to Explore quizzes\n- '3' to My records\n- '4' to Sign Out\nEnter your choice:"
    creator: "Press:\n- '1' to Play random quiz\n- '2' to Explore quizzes\n- '3' to My records\n- '4' to Manage My Quiz\n- '5' to Sign Out\nEnter your choice:"
    admin: "Press:\n- '1' to Add a creator\n- '2' to Remove a user\n- '3' to Remove a quiz\n- '4' to Sign Out\nEnter your choice:"

  authentication: "Press:\n- '1' to Sign In\n- '2' to Sign Up\n- '3' to Exit\nEnter your choice:"
  manage_quizzes: "Press:\n- '1' to Add quiz\n- '2' to Remove quiz\n- '3' to Modify a Quiz\n- '4' to Go Back\nEnter your choice:"
  manage_quiz: "Press:\n- '1' to Add question\n- '2' to Remove question\n- '3' to Go Back\nEnter your choice:"

strings:
  admin: "Admin"
  creator: "Creator"
  player: "Player"
  id: "Id"
  username: "Username"
  role: "Role"
  question: "Question"
  option: "Option"
  a: "A"
  quiz_name: "quiz_name"
  all_questions: "all_questions"
  movie: "Movie"
  music: "Music"
  book: "Book"
  performer: "performer"
  type: "Type"

numbers:
  zero: 0
  one: 1
  two: 2
  four: 4
  five: 5
  six: 6
  ten: 10

entities:
  - User
  - Quiz

messages:
  quiz_name: "You've selected {} quiz to play!"
  quiz_type: "{} is about {}."
  creator_info: "Enter the following details for the creator you want to add-"

inputs:
  username: "Enter username:"
  password: "Enter password:"
  user_id: "Enter user id:"
  quiz_id: "Enter quiz id:"
  type_ids: "Enter type ids (comma separated values):"
  quiz_name: "Enter quiz name:"
  question: "Enter question:"
  option: "Enter option {}:"
  number_of_questions: "Enter the number of questions (between 1 and 10):"
  number_of_options: "Enter the number of options (between 2 and 6):"
  correct_option: "Enter correct option (1, 2, 3 or 4):"
  explore_quizzes: "Enter keyword to search quiz(leave empty to get all quizzes):"

outputs:
  user_added: "User added successfully..."
  quiz_added: "Quiz added successfully..."
  creator_added: "Creator added successfully..."
  sign_in: "Signed in system as {}"
  sign_out: "Signed out from the system"
  invalid_choice: "Invalid Choice."
  user_info: "{user_id:5}\t{username:20}\t{user_role:20}"
  type_info: "{type_id:5}\t{type_name:20}"
  user_removed: "User removed successfully..."
  quiz_removed: "Quiz removed successfully..."

errors:
  invalid_credentials: "Invalid username or password!"
  user_404: "User not found!"
  username_already_exists: "Username already exists!"
  quiz_404: "Quiz not found!"
  performer_required: "Performer is required for this action!"
  permission: "You do not have enough permissions to perform this action!"
  lookup: "{} not found!"

sql_queries:
  create_auth_table: |
    CREATE TABLE IF NOT EXISTS authentication(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT NOT NULL UNIQUE,
        password_hash TEXT NOT NULL,
        user_role INTEGER CHECK (user_role IN (0, 1, 2)) DEFAULT 1,
        is_deleted BOOL NOT NULL DEFAULT False,
        created_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP
    );

  create_quiz_table: |
    CREATE TABLE IF NOT EXISTS quizzes(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        creator_id INTEGER NOT NULL,
        name TEXT NOT NULL,
        is_deleted BOOL NOT NULL DEFAULT False,
        created_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(creator_id) REFERENCES authentication(id)
    );

  create_question_table: |
    CREATE TABLE IF NOT EXISTS questions(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        quiz_id INTEGER NOT NULL,
        question TEXT NOT NULL,
        FOREIGN KEY(quiz_id) REFERENCES quizzes(id)
    );

  create_option_table: |
    CREATE TABLE IF NOT EXISTS options(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        question_id INTEGER NOT NULL,
        option INTEGER NOT NULL,
        is_correct BOOL NOT NULL DEFAULT FALSE,
        FOREIGN KEY(question_id) REFERENCES questions(id)
    );

  create_quiz_score_table: |
    CREATE TABLE IF NOT EXISTS options(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        player_id INTEGER NOT NULL,
        quiz_id INTEGER NOT NULL,
        player_score INTEGER NOT NULL DEFAULT 0,
        FOREIGN KEY(player_id) REFERENCES authentication(id),
        FOREIGN KEY(quiz_id) REFERENCES quizzes(id)
    );

  create_type_table: |
    CREATE TABLE IF NOT EXISTS types(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE NOT NULL
    );

  create_quiz_type_mapping_table: |
    CREATE TABLE IF NOT EXISTS quiz_type_mapping(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        quiz_id INTEGER NOT NULL,
        type_id INTEGER NOT NULL,
        FOREIGN KEY(quiz_id) REFERENCES quizzes(id),
        FOREIGN KEY(type_id) REFERENCES types(id)
    );

  get_all_users: |
    SELECT * FROM authentication
    WHERE user_role != 0 and is_deleted != True;

  get_user: |
    SELECT * FROM authentication
    WHERE username = ? AND is_deleted = False;

  add_user: |
    INSERT INTO authentication(username, password_hash, user_role)
    VALUES(?, ?, ?);

  remove_user: |
    UPDATE authentication
    SET is_deleted = True
    WHERE id = ?;

  get_random_quiz: |
    SELECT * FROM quizzes
    WHERE is_deleted != True
    ORDER BY RANDOM() LIMIT 1;

  add_quiz: |
    INSERT INTO quizzes(creator_id, name)
    VALUES(?, ?);

  add_question: |
    INSERT INTO questions(quiz_id, question)
    VALUES(?, ?);

  add_option: |
    INSERT INTO options(question_id, option, is_correct)
    VALUES(?, ?, ?);

  add_quiz_type: |
    INSERT INTO quiz_type_mapping(quiz_id, type_id)
    VALUES(?, ?);

  get_all_types: |
    SELECT * FROM types;

  add_type: |
    INSERT OR IGNORE INTO types (name)
    VALUES (?);